import{w as e,U as o,V as t}from"./BEP20USDT.4l3CktaQ.js";import{a as r}from"./apiService.Bl7qyh6B.js";import{V as s}from"./VGAUPlatformRecharge.BXpF-dn-.js";const n=new class{constructor(){this.isInitialized=!1,this.setupEventListeners()}setupEventListeners(){window.addEventListener("walletBindingCheck",this.handleWalletBindingCheck.bind(this))}async handleWalletBindingCheck(e){const{account:o,chainId:t,source:r}=e.detail;if(console.log("🔍 开始检测钱包绑定状态:",{account:o,chainId:t,source:r}),o)try{this.clearLocalCache();const e=await this.checkWalletBindingStatus(o,t);this.triggerBindingStatusUpdate(e),console.log("✅ 钱包绑定状态检测完成:",e)}catch(s){console.error("❌ 钱包绑定状态检测失败:",s),this.triggerBindingError(s)}else console.log("❌ 无效的钱包地址")}async checkWalletBindingStatus(e,o){try{console.log("🔍 检测钱包地址绑定状态:",e);const t=await this.checkUserLoginStatus();if(t.isLoggedIn)return console.log("✅ 用户已登录，检查钱包地址匹配"),t.userData.walletAddress===e?{isBound:!0,isLoggedIn:!0,userData:t.userData,walletAddress:e,message:"钱包地址已绑定并已登录"}:(console.log("⚠️ 钱包地址不匹配，需要重新登录"),{isBound:!1,isLoggedIn:!1,walletAddress:e,message:"钱包地址已切换，需要重新登录"});console.log("🔍 用户未登录，尝试钱包登录");return await this.attemptWalletLogin(e,o)}catch(t){throw console.error("检测钱包绑定状态失败:",t),t}}async checkUserLoginStatus(){try{console.log("🔍 强制从后端获取用户登录状态...");const e=await r.getMe();return e&&e.success?(console.log("✅ 从后端获取到用户数据:",e.data),{isLoggedIn:!0,userData:e.data}):(console.log("❌ 后端返回用户未登录状态"),{isLoggedIn:!1,userData:null})}catch(e){return console.error("❌ 获取用户登录状态失败:",e),{isLoggedIn:!1,userData:null}}}async attemptWalletLogin(e,o){try{return console.log("🔐 尝试钱包登录:",{walletAddress:e,chainId:o}),{isBound:!1,isLoggedIn:!1,walletAddress:e,message:"需要用户签名进行钱包登录",requiresSignature:!0,nextStep:'请点击"连接钱包"按钮进行登录'}}catch(t){console.error("❌ 钱包登录尝试失败:",t);const r=this.analyzeWalletLoginError(t,e,o);return{isBound:!1,isLoggedIn:!1,walletAddress:e,message:r.userMessage,error:t.message,errorCode:r.errorCode,errorType:r.errorType,suggestions:r.suggestions,requiresSignature:!1,canRetry:r.canRetry}}}analyzeWalletLoginError(e,o,t){console.log("🔍 分析钱包登录错误:",e);const r={errorCode:"UNKNOWN_ERROR",errorType:"UNKNOWN",userMessage:"钱包登录失败",suggestions:[],canRetry:!0};if(e.message){const o=e.message.toLowerCase();o.includes("network")||o.includes("fetch")||o.includes("timeout")?(r.errorCode="NETWORK_ERROR",r.errorType="NETWORK",r.userMessage="网络连接失败，请检查网络设置",r.suggestions=["检查网络连接是否正常","检查VPN设置","尝试切换网络","稍后重试"],r.canRetry=!0):o.includes("wallet")||o.includes("metamask")||o.includes("provider")?(r.errorCode="WALLET_CONNECTION_ERROR",r.errorType="WALLET",r.userMessage="钱包连接失败，请检查钱包状态",r.suggestions=["确保MetaMask已安装并解锁","检查钱包是否连接到正确的网络","尝试重新连接钱包","刷新页面后重试"],r.canRetry=!0):o.includes("user rejected")||o.includes("user denied")||o.includes("cancel")?(r.errorCode="USER_REJECTED",r.errorType="USER_ACTION",r.userMessage="用户取消了钱包连接操作",r.suggestions=['请重新点击"连接钱包"按钮',"在MetaMask中确认连接请求","检查MetaMask弹窗是否被阻止"],r.canRetry=!0):o.includes("chain")||o.includes("network")||o.includes("unsupported")?(r.errorCode="CHAIN_ID_ERROR",r.errorType="NETWORK",r.userMessage="网络不支持，请切换到正确的网络",r.suggestions=["切换到BSC测试网 (Chain ID: 97)","检查钱包网络设置","确保网络配置正确"],r.canRetry=!0):o.includes("signature")||o.includes("sign")||o.includes("personal_sign")?(r.errorCode="SIGNATURE_ERROR",r.errorType="SIGNATURE",r.userMessage="消息签名失败，请重试",r.suggestions=["在MetaMask中确认签名请求","检查签名消息内容","重新尝试签名操作"],r.canRetry=!0):o.includes("server")||o.includes("500")||o.includes("502")||o.includes("503")?(r.errorCode="SERVER_ERROR",r.errorType="SERVER",r.userMessage="服务器暂时不可用，请稍后重试",r.suggestions=["稍后重试","检查服务状态","联系客服支持"],r.canRetry=!0):o.includes("unauthorized")||o.includes("401")||o.includes("auth")?(r.errorCode="AUTH_ERROR",r.errorType="AUTH",r.userMessage="认证失败，请重新登录",r.suggestions=["重新连接钱包","清除浏览器缓存","检查登录状态"],r.canRetry=!0):o.includes("not bound")||o.includes("wallet not bound")?(r.errorCode="WALLET_NOT_BOUND",r.errorType="BINDING",r.userMessage="该钱包地址未绑定用户账户",r.suggestions=["使用已绑定的钱包地址","联系客服绑定新钱包","检查钱包地址是否正确"],r.canRetry=!1):(o.includes("insufficient")||o.includes("balance")||o.includes("gas"))&&(r.errorCode="INSUFFICIENT_BALANCE",r.errorType="BALANCE",r.userMessage="钱包余额不足，无法完成操作",r.suggestions=["检查钱包BNB余额","确保有足够的Gas费用","充值后重试"],r.canRetry=!0)}if(e.response){const o=e.response.status;switch(r.httpStatus=o,o){case 400:r.errorCode="BAD_REQUEST",r.userMessage="请求参数错误，请检查输入";break;case 401:r.errorCode="UNAUTHORIZED",r.userMessage="未授权访问，请重新登录";break;case 403:r.errorCode="FORBIDDEN",r.userMessage="权限不足，无法执行此操作";break;case 404:r.errorCode="NOT_FOUND",r.userMessage="请求的资源不存在";break;case 429:r.errorCode="RATE_LIMITED",r.userMessage="请求过于频繁，请稍后重试";break;case 500:r.errorCode="INTERNAL_SERVER_ERROR",r.userMessage="服务器内部错误，请稍后重试";break;case 502:r.errorCode="BAD_GATEWAY",r.userMessage="网关错误，请稍后重试";break;case 503:r.errorCode="SERVICE_UNAVAILABLE",r.userMessage="服务暂时不可用，请稍后重试"}}return 0===r.suggestions.length&&(r.suggestions=["检查网络连接","重新连接钱包","刷新页面后重试","联系技术支持"]),this.logWalletLoginError(e,r,{walletAddress:o,chainId:t}),console.log("📋 钱包登录错误分析结果:",r),r}logWalletLoginError(e,o,t){const r={timestamp:Date.now(),errorType:"WALLET_LOGIN_ERROR",error:{message:e.message,stack:e.stack,name:e.name},errorInfo:o,context:t,userAgent:"undefined"!=typeof navigator?navigator.userAgent:"unknown",url:"undefined"!=typeof window?window.location.href:"unknown"};console.log("📝 钱包登录错误日志:",r);try{if("undefined"!=typeof window){const e=JSON.parse(localStorage.getItem("wallet_login_error_logs")||"[]");e.push(r),e.length>20&&e.splice(0,e.length-20),localStorage.setItem("wallet_login_error_logs",JSON.stringify(e)),console.log("💾 钱包登录错误日志已保存到本地存储")}}catch(s){console.error("保存钱包登录错误日志失败:",s)}}triggerBindingStatusUpdate(e){const o=new CustomEvent("walletBindingStatusUpdated",{detail:{...e,timestamp:Date.now()}});window.dispatchEvent(o),console.log("触发钱包绑定状态更新事件:",e)}triggerBindingError(e){const o=new CustomEvent("walletBindingError",{detail:{error:e.message||"钱包绑定检测失败",timestamp:Date.now()}});window.dispatchEvent(o),console.log("触发钱包绑定错误事件:",e)}async manualCheckBinding(e,o){return console.log("手动检测钱包绑定状态:",e),this.clearLocalCache(),await this.checkWalletBindingStatus(e,o)}clearLocalCache(){if(console.log("🧹 钱包绑定服务清除本地缓存状态..."),"undefined"!=typeof window){const e=[];for(let t=0;t<localStorage.length;t++){const o=localStorage.key(t);o&&(o.includes("user")||o.includes("auth")||o.includes("login"))&&e.push(o)}e.forEach((e=>{localStorage.removeItem(e),console.log("🗑️ 清除缓存:",e)}));const o=[];for(let t=0;t<sessionStorage.length;t++){const e=sessionStorage.key(t);e&&(e.includes("user")||e.includes("auth")||e.includes("login"))&&o.push(e)}o.forEach((e=>{sessionStorage.removeItem(e),console.log("🗑️ 清除会话缓存:",e)}))}console.log("✅ 钱包绑定服务本地缓存状态清除完成")}init(){return this.isInitialized||(this.isInitialized=!0,console.log("✅ 钱包绑定检测服务初始化成功")),!0}setupDebugTools(){"undefined"!=typeof window&&(console.log("🔧 开发环境 - 钱包登录错误日志查看工具已启用"),console.log("📋 查看钱包登录错误日志: window.viewWalletLoginErrorLogs()"),console.log("🗑️ 清除钱包登录错误日志: window.clearWalletLoginErrorLogs()"),window.viewWalletLoginErrorLogs=()=>{try{const e=JSON.parse(localStorage.getItem("wallet_login_error_logs")||"[]");console.log("📋 钱包登录错误日志:",e),0===e.length?console.log("✅ 暂无钱包登录错误日志"):(console.log(`📊 共 ${e.length} 条钱包登录错误日志`),e.forEach(((e,o)=>{console.log(`--- 错误日志 ${o+1} ---`),console.log("时间:",new Date(e.timestamp).toLocaleString()),console.log("错误类型:",e.errorInfo.errorType),console.log("错误代码:",e.errorInfo.errorCode),console.log("用户消息:",e.errorInfo.userMessage),console.log("错误详情:",e.error.message),console.log("建议:",e.errorInfo.suggestions),console.log("可重试:",e.errorInfo.canRetry)})))}catch(e){console.error("查看钱包登录错误日志失败:",e)}},window.clearWalletLoginErrorLogs=()=>{try{localStorage.removeItem("wallet_login_error_logs"),console.log("🗑️ 钱包登录错误日志已清除")}catch(e){console.error("清除钱包登录错误日志失败:",e)}},window.analyzeWalletLoginError=e=>{try{const o={message:e},t=this.analyzeWalletLoginError(o,"0x...",97);return console.log("🔍 错误分析结果:",t),t}catch(o){console.error("分析错误失败:",o)}})}},a="0xFb015C1e853a66a7713e7C750C2fc4451405601b",i="0xf6307065A593840680765889Fc16461bC7781231",c="0x75579C9FB3A30e7c3CaBB5c74E4A6c0DB1e2054d";const l=new class{constructor(){this.isInitialized=!1,this.setupEventListeners()}setupEventListeners(){window.addEventListener("walletAccountChanged",this.handleWalletChange.bind(this))}async handleWalletChange(e){console.log("检测到钱包变化，重新初始化合约:",e.detail),this.isInitialized=!1;try{await this.init(),console.log("✅ 合约重新初始化成功"),this.triggerWalletBindingCheck(e.detail),this.clearLocalCache()}catch(o){console.error("❌ 合约重新初始化失败:",o)}}clearLocalCache(){if(console.log("🧹 清除本地缓存状态..."),"undefined"!=typeof window){const e=[];for(let t=0;t<localStorage.length;t++){const o=localStorage.key(t);o&&(o.includes("user")||o.includes("auth")||o.includes("login"))&&e.push(o)}e.forEach((e=>{localStorage.removeItem(e),console.log("🗑️ 清除缓存:",e)}));const o=[];for(let t=0;t<sessionStorage.length;t++){const e=sessionStorage.key(t);e&&(e.includes("user")||e.includes("auth")||e.includes("login"))&&o.push(e)}o.forEach((e=>{sessionStorage.removeItem(e),console.log("🗑️ 清除会话缓存:",e)}))}console.log("✅ 本地缓存状态清除完成")}triggerWalletBindingCheck(e){const o=new CustomEvent("walletBindingCheck",{detail:{account:e.account,chainId:e.chainId,timestamp:Date.now(),source:"contractService"}});window.dispatchEvent(o),console.log("合约服务触发钱包绑定检测事件")}async init(){try{if(this.isInitialized)return!0;console.log("开始初始化合约服务...");if(!(await e.init()))throw new Error("Web3初始化失败");if(!(await e.connectWallet()).success)throw new Error("钱包连接失败");return await e.loadContract(a,s.abi,"VGAUPlatformRecharge"),await e.loadContract(i,o,"USDTToken"),await e.loadContract(c,t.abi,"VGAUToken"),await n.init(),this.isInitialized=!0,console.log("✅ 合约服务初始化成功"),!0}catch(r){throw console.error("❌ 合约服务初始化失败:",r),r}}async reinit(){return console.log("手动重新初始化合约服务..."),this.isInitialized=!1,await this.init()}async getUSDTBalance(o=null){try{this.isInitialized||await this.init();const t=o||e.currentAccount,r=await e.callContractMethod("USDTToken","balanceOf",t);return{raw:r,formatted:(r/Math.pow(10,18)).toFixed(2)}}catch(t){throw console.error("获取USDT余额失败:",t),t}}async getVGAUBalance(o=null){try{this.isInitialized||await this.init();const t=o||e.currentAccount,r=await e.callContractMethod("VGAUToken","balanceOf",t);return{raw:r,formatted:(r/Math.pow(10,18)).toFixed(2)}}catch(t){throw console.error("获取VGAU余额失败:",t),t}}async getUSDTAllowance(o=null,t=null){try{this.isInitialized||await this.init();const r=o||e.currentAccount,s=t||a,n=await e.callContractMethod("USDTToken","allowance",r,s);return{raw:n,formatted:n/Math.pow(10,18)}}catch(r){throw console.error("获取USDT授权额度失败:",r),r}}async getVGAUAllowance(o=null,t=null){try{this.isInitialized||await this.init();const r=o||e.currentAccount,s=t||a,n=await e.callContractMethod("VGAUToken","allowance",r,s);return{raw:n,formatted:n/Math.pow(10,18)}}catch(r){throw console.error("获取VGAU授权额度失败:",r),r}}async approveUSDT(o){try{this.isInitialized||await this.init();const t=e.web3.utils.toWei(o.toString(),"ether").toString();console.log("🔐 开始授权USDT..."),console.log("授权金额:",o,"USDT"),console.log("授权金额(wei):",t);const r=await e.sendTransaction("USDTToken","approve",{from:e.currentAccount},a,t);return console.log("✅ USDT授权成功:",r.transactionHash),r}catch(t){throw console.error("❌ USDT授权失败:",t),t}}async approveVGAU(o){try{this.isInitialized||await this.init(),console.log("🔐 开始授权VGAU..."),console.log("授权金额:",o,"VGAU");const t=await e.sendTransaction("VGAUToken","approve",{from:e.currentAccount},a,o.toString());return console.log("✅ VGAU授权成功:",t.transactionHash),t}catch(t){throw console.error("❌ VGAU授权失败:",t),t}}async resetUSDTAllowance(){try{this.isInitialized||await this.init(),console.log("🔄 重置USDT授权额度为0...");const o=await e.sendTransaction("USDTToken","approve",{from:e.currentAccount},a,0);return console.log("✅ USDT授权额度重置成功:",o.transactionHash),o}catch(o){throw console.error("❌ USDT授权额度重置失败:",o),o}}async resetVGAUAllowance(){try{this.isInitialized||await this.init(),console.log("🔄 重置VGAU授权额度为0..."),console.log("🔍 开始检查网络状态...");const o=await this.checkNetwork();if(console.log("📋 网络状态检查结果:",o),!o.isSupported)throw console.error("❌ 网络不支持:",{currentChainId:o.chainId,supportedChainIds:o.supportedChainIds,isSupported:o.isSupported}),new Error(`当前网络不支持，请切换到BSC测试网。当前链ID: ${o.chainId}`);console.log("✅ 网络状态检查通过");const t=await e.sendTransaction("VGAUToken","approve",{from:e.currentAccount},a,0);return console.log("✅ VGAU授权额度重置成功:",t.transactionHash),t}catch(o){if(console.error("❌ VGAU授权额度重置失败:",o),o.message&&o.message.includes("RPC endpoint returned HTTP client error")){const e=new Error("区块链网络连接失败，请稍后重试");throw e.originalError=o,e.errorType="RPC_ERROR",e.suggestions=["检查网络连接是否正常","尝试切换网络（4G/5G/WiFi）","检查VPN设置","稍后重试（可能是网络拥堵）"],e}throw o}}async rechargeUSDT(o){try{this.isInitialized||await this.init();const t=e.web3.utils.toWei(o.toString(),"ether").toString();console.log("💰 开始USDT充值..."),console.log("充值金额:",o,"USDT"),console.log("充值金额(wei):",t);const r=await e.sendTransaction("VGAUPlatformRecharge","rechargeUSDT",{from:e.currentAccount},t);return console.log("✅ USDT充值成功:",r.transactionHash),r}catch(t){throw console.error("❌ USDT充值失败:",t),t}}async rechargeVGAU(o){try{this.isInitialized||await this.init(),console.log("💰 开始VGAU充值..."),console.log("充值金额:",o,"VGAU");const t=await e.sendTransaction("VGAUPlatformRecharge","rechargeVGAU",{from:e.currentAccount},o.toString());return console.log("✅ VGAU充值成功:",t.transactionHash),t}catch(t){throw console.error("❌ VGAU充值失败:",t),t}}async completeUSDTRecharge(e){try{console.log("🚀 开始完整USDT充值流程..."),console.log("📱 设备信息:",{userAgent:navigator.userAgent,platform:navigator.platform,isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}),console.log("🔍 步骤1: 检查USDT授权额度...");const o=await this.getUSDTAllowance(),t=parseFloat(o.formatted),r=parseFloat(e);console.log("📊 授权额度检查:",{"当前授权额度":t,"需要授权额度":r,"原始授权额度":o.raw,"是否需要授权":t!==r}),t===r?console.log("✅ USDT授权额度已足够，无需重复授权"):t>0?(console.log("🔄 重置USDT授权额度为0..."),console.log("⏳ 等待重置交易确认..."),await this.resetUSDTAllowance(),await this.waitForTransaction(),console.log("✅ 重置交易确认完成"),console.log("🔄 重新授权USDT..."),await this.approveUSDT(e),console.log("⏳ 等待授权交易确认..."),await this.waitForTransaction(),console.log("✅ 授权交易确认完成")):(console.log("🆕 首次授权USDT..."),await this.approveUSDT(e),console.log("⏳ 等待授权交易确认..."),await this.waitForTransaction(),console.log("✅ 授权交易确认完成")),console.log("🔍 步骤3: 执行USDT充值...");const s=await this.rechargeUSDT(e);return console.log("🎉 USDT充值流程完成!"),s}catch(o){if(console.error("❌ USDT充值流程失败:",{error:o.message,stack:o.stack,errorType:o.errorType,suggestions:o.suggestions,contractName:o.contractName,methodName:o.methodName,timestamp:o.timestamp}),o.errorType)throw o;const e=new Error(`USDT充值失败: ${o.message}`);throw e.originalError=o,e.errorType="RECHARGE_ERROR",e.suggestions=["检查网络连接是否正常","确保钱包已连接并解锁","检查账户余额是否充足","尝试减少充值金额","联系技术支持"],e}}async completeVGAURecharge(e){try{console.log("🚀 开始完整VGAU充值流程..."),console.log("📱 设备信息:",{userAgent:navigator.userAgent,platform:navigator.platform,isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)}),console.log("🔍 步骤1: 检查VGAU授权额度...");const o=await this.getVGAUAllowance(),t=parseFloat(o.formatted),r=parseFloat(e);console.log("📊 授权额度检查:",{"当前授权额度":t,"需要授权额度":r,"原始授权额度":o.raw,"是否需要授权":t!==r}),t===r?console.log("✅ VGAU授权额度已足够，无需重复授权"):t>0?(console.log("🔄 重置VGAU授权额度为0..."),console.log("⏳ 等待重置交易确认..."),await this.resetVGAUAllowance(),await this.waitForTransaction(),console.log("✅ 重置交易确认完成"),console.log("🔄 重新授权VGAU..."),await this.approveVGAU(e),console.log("⏳ 等待授权交易确认..."),await this.waitForTransaction(),console.log("✅ 授权交易确认完成")):(console.log("🆕 首次授权VGAU..."),await this.approveVGAU(e),console.log("⏳ 等待授权交易确认..."),await this.waitForTransaction(),console.log("✅ 授权交易确认完成")),console.log("🔍 步骤3: 执行VGAU充值...");const s=await this.rechargeVGAU(e);return console.log("🎉 VGAU充值流程完成!"),s}catch(o){if(console.error("❌ VGAU充值流程失败:",{error:o.message,stack:o.stack,errorType:o.errorType,suggestions:o.suggestions,contractName:o.contractName,methodName:o.methodName,timestamp:o.timestamp}),o.errorType)throw o;const e=new Error(`VGAU充值失败: ${o.message}`);throw e.originalError=o,e.errorType="RECHARGE_ERROR",e.suggestions=["检查网络连接是否正常","确保钱包已连接并解锁","检查账户余额是否充足","尝试减少充值金额","联系技术支持"],e}}async waitForTransaction(){return new Promise((e=>{setTimeout(e,3e3)}))}async getNetworkInfo(){try{return await e.getNetworkInfo()}catch(o){throw console.error("获取网络信息失败:",o),o}}async checkNetwork(){try{console.log("🔍 ContractService.checkNetwork 开始..."),console.log("📋 调用 web3Service.checkNetwork([97])");const o=await e.checkNetwork([97]);return console.log("📋 web3Service.checkNetwork 返回结果:",o),console.log("📋 结果类型检查:",{chainId:o.chainId,chainIdType:typeof o.chainId,isSupported:o.isSupported,isSupportedType:typeof o.isSupported,supportedChainIds:o.supportedChainIds}),o}catch(o){throw console.error("❌ ContractService.checkNetwork 失败:",o),o}}};export{l as c};
